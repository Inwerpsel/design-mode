.oklch-picker {
    ::-webkit-slider-thumb {
        appearance: auto !important;
        block-size: auto !important;
        margin-block-start: 0 !important;
    }
    ::-webkit-slider-runnable-track {
        appearance: auto !important;
        block-size: auto !important;
        border-radius: 0 !important;
    }
}
.oklch-picker input[type=range], .image-colors input[type=range] {
    max-width: none !important;
}

.oklch-picker input[type=range] {
    border: none !important;
    // filter: grayscale(1);
    min-height: 0;
    height: auto !important;
    padding: 0 !important;
    outline: none !important;
    --picked: oklch(var(--picked-lightness, 63%) var(--picked-chroma, 0.1) var(--picked-hue, 180));
    accent-color: grey;


    &::-webkit-slider-thumb {
        accent-color: var(--picked);
    }

    &#hue, &:focus, .hovering-with-color {

        &::-webkit-slider-runnable-track {
            border: none;
            background: var(--picked);
            padding-top: 4px;
        }
    }
}

#hue,
#lightness,
#chroma,
#alpha {
    position: absolute;
    top: 41px;
    max-width: 352px !important;
    width: 352px;
    margin-left: -6px;
    box-sizing: border-box;
    user-select: none;
    margin-top: 0;
}

#hue,
#lightness,
#chroma {
    // Put psuedo on the range element to extend it upward,
    // so that you can also pick from the corresponding color preview.
    &:before {
        // Exclude alpha for now as it can be collapsed.
        content: "";
        position: absolute;
        left: 0;
        bottom: 100%;
        width: 100%;
        height: 36px;
        background: transparent;
    }
}

#alpha {
    opacity: calc(0.5 + (1 - var(--picked-alpha, 1)) * 1000);

    &:focus {
        opacity: 1;
        &::-webkit-slider-runnable-track {
            background: var(--picked);
            opacity: var(--picked-alpha);
        }
    }
}

.hue, .oklch-chroma, .lightness, .alpha {
    position: relative;
    height: 42px;
    width: 340px;
    margin: 20px 0;
    border-radius: 12px;

    .oklch-picker:not(:focus-within) &, .oklch-picker:not(:focus-within) & * {
        transition-property: width, left, right, top, height, --min-lightness, --max-lightness;
        transition-delay: .04s;
        transition-duration: 0.2s;
    }
}

.hue {
    border-radius: 0;
    --c: oklch(var(--picked-lightness, 63%) var(--picked-chroma, 0.138) 0);

    background: linear-gradient(90deg in oklch longer hue, var(--c), var(--c));
}

.oklch-chroma {
    --hue: var(--picked-hue, 180);
    --lightness: var(--picked-lightness, 63%);
    --purest: oklch(var(--lightness) var(--max-chroma) var(--hue));
    --fromgray: oklch(var(--lightness) 0 0 / 1);

    width: calc(340px * (var(--max-chroma) / 0.37));
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    // Todo:
    // - Check if it results in any visible error
    // - Check how expensive this is
    // - Check if can be accurate with less steps
    background: linear-gradient(
        to right in oklch,
        var(--fromgray) 0%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.05) var(--hue)) 5%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.1) var(--hue)) 10%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.15) var(--hue)) 15%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.2) var(--hue)) 20%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.25) var(--hue)) 25%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.3) var(--hue)) 30%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.35) var(--hue)) 35%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.4) var(--hue)) 40%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.45) var(--hue)) 45%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.5) var(--hue)) 50%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.55) var(--hue)) 55%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.6) var(--hue)) 60%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.65) var(--hue)) 65%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.7) var(--hue)) 70%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.75) var(--hue)) 75%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.8) var(--hue)) 80%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.85) var(--hue)) 85%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.9) var(--hue)) 90%,
        oklch(var(--lightness) calc(var(--max-chroma) * 0.95) var(--hue)) 95%,
        var(--purest) 100%,
    );
}

$stripe-color-1: grey;
$stripe-color-2: rgb(137, 137, 137);

$stripe-bg: repeating-linear-gradient(45deg,
        $stripe-color-1,
        $stripe-color-1 2px,
        $stripe-color-2 2px,
        $stripe-color-2 4px);

$stripe-bg-r: repeating-linear-gradient(225deg,
        $stripe-color-1,
        $stripe-color-1 2px,
        $stripe-color-2 2px,
        $stripe-color-2 4px);

.lightness {
    --hue: var(--picked-hue, 180);
    --from: oklch(var(--min-lightness) var(--picked-chroma) var(--hue, 180));
    --to: oklch(var(--max-lightness) var(--picked-chroma) var(--hue, 180));

    background:
        linear-gradient(
            to right in oklch,
            transparent 0%,
            transparent var(--min-lightness),
            var(--from) var(--min-lightness),
            var(--to) var(--max-lightness),
            transparent var(--max-lightness),
            transparent 100%
        ),
        $stripe-bg;
}

@property --min-lightness {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
}

@property --max-lightness {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 100%;
}

.alpha {
    --from: oklch(var(--picked-lightness) var(--picked-chroma) var(--picked-hue) / 0);
    --to: oklch(var(--picked-lightness) var(--picked-chroma) var(--picked-hue));
    background: linear-gradient(to right in oklch, var(--from), var(--to)); 

    // Shrink the picker if alpha is 1.
    --offset: calc(42px * min(1, 1000 * (1 - var(--picked-alpha, 1))));

    #alpha {
        top: var(--offset);
    }

    height: var(--offset);
    margin-top: 32px;
    margin-bottom: 62px;

    &:before {
        content: '';

    }

    &:after {
        content: '';

    }
}

.picked-cursor {
    z-index: 10000000000000000;
    position: fixed;
    top: 12px;
    left: 12px;
    width: 32px;
    height: 32px;
    background-color: var(--picked-value, red);
    border-radius: 50%;
    margin-bottom: 20rem;
}