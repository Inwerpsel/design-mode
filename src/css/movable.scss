$switcher-height: 40px;
$switcher-width: 120px;
$subtle-grey: rgb(179, 162, 162);

.area-switcher {
  max-width: $switcher-width;
}

.area {
  z-index: 10000;
  display: flex;
  gap: 8px;
  align-items: flex-start;

  > * {
    padding: 2px;
    border: 1px solid $subtle-grey;
    border-radius: 2px;
    flex-shrink: 0;
  }
  > :hover {
    border-color: black;
  }

  // Workaround for browser bug when starting a drag and ending up
  // above another element. The current behavior in Chromium is definitely wrong:
  // We can only arrive above the element after already having initiated the drag.
  // Which should have made it ignore the cursor for normal mouse events outside of
  // the in progress drag. Nevertheless this is what Chromium does.
  //     => drag has started
  //     => capture drag image of picked up element before changing its appearance
  //     => modify the height of picked up element
  //     => cursor still triggers hover state of next element, but drag image is correct
  // This false hovered state stays present until you drop the dragged element,
  // making a random element look different for no reason, very confusing.
  .is-dragging & > :hover {
    border-color: transparent;
  }
}

$area-speed: .2s;

#area-left, #area-left-inner, #area-right {
  // Todo: Best way to make widths user configurable.
  > .movable-element > * {
    width: 400px;
  }
  scrollbar-gutter: stable;
  overflow-y: auto;
  overflow-x: visible;
  flex-direction: column;
  flex-shrink: 0;

  @media screen and (min-height: 350px) {
    // Todo: properly constrain height depending on top and bottom areas.
    max-height: calc(100vh - var(--top-area--height, 60px) - var(--bottom-area--height, 60px));
  }

  .area-dropzone {
    transition: width, height $area-speed ease-in;
  }

  .area-switcher {
    top: 0;
    right: 0;
  }

  align-items: stretch;
}

#area-left-inner {
  // overflow-x: hidden;
  flex-direction: column;
  // flex-shrink: 1;
}

// .is-dragging #area-left-inner {
//   .area-dropzone {
//     min-width: 180px;
//   }
// }

#drawer .area-switcher {
  right: 0;
  top: 0;
  position: static !important;
}

#area-top, #area-bottom, #area-top-reverse, #area-bottom-reverse {
  > * {
    background-color: rgb(201, 190, 190);
  }
  z-index: 10002;

  .area-dropzone {
    transition: width, height $area-speed ease-in;
  }

  label {
    display: inline-block;
  }
}

#area-left {
  z-index: 10001;
}

#area-top {
  .area-switcher  {
    bottom: 0;
    left: 0;
  }
}

#area-bottom, #area-bottom-reverse {
  flex-grow: 1;
  position: fixed !important;
  z-index: 1000000;

  &:has(.movable-element) {
    height: 0;
  }

  > * { 
    align-self: flex-end;
    overflow-y: auto;
  }
}

#area-bottom-reverse {
  margin-right: 90px;
  bottom: 0;
  right: 0;
}

#area-bottom {
  bottom: 0;
  left: 0;
  align-items: flex-end;

  .area-switcher {
    z-index: 1000001;
    top: 4px;
    // top: -$switcher-height;
    right: 0;
  }

  > * {
    max-height: 50vh;
    max-width: 400px;
  }
}

.dropzone {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(33, 52, 26, 0.20);
}

.area-dropzone {
  width: 0;
  height: 0;
  align-self: flex-end;
  visibility: hidden;

  .is-dragging & {
    visibility: visible;
    flex-shrink: 1 !important;
    flex-grow: 1 !important;
    transition-timing-function: ease-out;
    width: auto;
    height: auto;

    &:only-child {
      flex: 0;
    }

    align-self: stretch;
  }
}


.is-dragging {
  #area-top, #area-bottom {
    .area-dropzone {
      min-width: 20px;

      &:only-child {
        height: 30px;
      }
    }

    .drag-hovered {
      border-left: 4px solid yellow;

      min-width: 120px;
    }
  }

  #area-top-reverse, #area-bottom-reverse {
    .area-dropzone {
      min-height: 30px;
      min-width: 40px;

      &:only-child {
        height: 30px;
      }
    }

    .drag-hovered {
      border-right: 4px solid yellow;

      min-width: 120px;
    }
  }

  #area-left, #area-right, #area-left-inner {
    .area-dropzone {
      &:only-child {
        width: 60px;
      }
    }
    .drag-hovered {
      border-top: 4px solid yellow !important;
    }
  }

  #drawer {
    .drag-hovered {
      border-bottom: 4px solid yellow !important;
    }
  }
}

.movable-container {
  display: flex;
  gap: 8px;
  flex-direction: column;
  align-items: stretch;
  justify-content: stretch;
  z-index: 10000;
  position: absolute;
  width: 100%;
  height: 100%;
}

.is-dragged {
  overflow: hidden;
  > * {
    //transition: width, height 1s ease-out;
    width: 0 !important;
    min-width: 0 !important;
    height: 0 !important;
    min-height: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    overflow: hidden !important;
  }
}

.movable-element {
  min-width: 0;
  min-height: 0;
  transition: min-width,min-height .2s ease;
  transition-delay: .1s;
}

.is-dragging {
  #area-left, #area-right {
    min-width: 140px;
    .movable-element:not(.is-dragged) {
      min-height: 20px;
    }
  }
  #area-top, #area-bottom {
    transition: min-height;
    transition-delay: .1s;
    .movable-element:not(.is-dragged) {
      min-width: 20px;
    }
  }
}

#drawer-wrapper {
  position: fixed;
  right: 0;
  bottom: 0;
  z-index: 10000;
}

#drawer {
  margin-top: 24px;
  position: absolute !important;
  bottom: 40px;
  right: 0;
  display: flex;
  flex-direction: column-reverse;
  transition: min-height 1s ease;
  transition-delay: .5s;
  align-self: flex-end;
  max-height: 70vh;
  overflow-y: auto;

  &[data-open=true] {
    background: $subtle-grey;
    border: 2px solid black;
    border-radius: 4px;
    padding: 8px;
  }
}

.is-dragging #drawer {
  align-self: stretch;
  border: 1px solid grey;
  min-height: 200px;
  min-width: 200px;

  .area-dropzone {
    min-height: 32px;
    min-width: 120px;
  }
}

#drawer-opener {
  min-height: 40px;
  flex-grow: 0 !important;
  font-size: 22px;
  text-align: center;
  background: $subtle-grey;
}

.is-compact {
  overflow: visible !important;
}

.movable-element-collapse {
  position: absolute;

  padding-top: 2px;

  min-width: 24px !important;
  min-height: 24px !important;

  top: 0;
  right: 0;

  #area-bottom &, #area-bottom-reverse & {
    top: auto;
    bottom: 0;
  }
}